S = input()
result = [-1] * 26
for i in range(len(S)):
    idx = ord(S[i]) - ord('a')
    if result[idx] == -1:
        result[idx] = i
print(*result)

#Description
'''
알파벳 소문자로만 이루어진 단어 S가 주어진다.
각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를, 포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.
'''
#Input
'''
첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.
'''
#Output
'''
각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치, ... z가 처음 등장하는 위치를 공백으로 구분해서 출력한다.
만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다. 단어의 첫 번째 글자는 0번째 위치이고, 두 번째 글자는 1번째 위치이다.
'''

#Solution
'''
-1이 26개 있는 result라는 list를 만듦
입력받은 S의 각 알파벳을 아스키코드 값으로 변환함
알파벳 소문자의 아스키코드 값은 97부터 시작되므로 a의 아스키코드 값을 빼준 값을 idx로 저장함
그러면 a는 0, b는 1, ..., z는 25의 idx 값을 가짐
result에서 해당 인덱스의 값이 -1이라면 그 알파벳이 처음 나온 것이므로 S에서 그 알파벳의 인덱스 번호로 저장함
출력 형식을 맞추기 위해 *를 이용해 result를 언패킹하여 출력함
'''