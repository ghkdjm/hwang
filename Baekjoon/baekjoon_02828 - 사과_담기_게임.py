N, M = map(int, input().split())
J = int(input())
apple = [int(input()) for _ in range(J)]

move = 0
last = M
for i in range(J):
    first = last - M + 1
    if apple[i] < first:
        move += first - apple[i]
        last = apple[i] + M - 1
    elif apple[i] > last:
        move += apple[i] - last
        last = apple[i]

print(move)

#Description
'''
상근이는 오락실에서 바구니를 옮기는 오래된 게임을 한다. 스크린은 N칸으로 나누어져 있다. 스크린의 아래쪽에는 M칸을 차지하는 바구니가 있다.
(M<N) 플레이어는 게임을 하는 중에 바구니를 왼쪽이나 오른쪽으로 이동할 수 있다. 하지만, 바구니는 스크린의 경계를 넘어가면 안 된다.
가장 처음에 바구니는 왼쪽 M칸을 차지하고 있다.
스크린의 위에서 사과 여러 개가 떨어진다. 각 사과는 N칸중 한 칸의 상단에서 떨어지기 시작하며, 스크린의 바닥에 닿을때까지 직선으로 떨어진다.
한 사과가 바닥에 닿는 즉시, 다른 사과가 떨어지기 시작한다.
바구니가 사과가 떨어지는 칸을 차지하고 있다면, 바구니는 그 사과가 바닥에 닿을 때, 사과를 담을 수 있다. 상근이는 사과를 모두 담으려고 한다.
이때, 바구니의 이동 거리의 최솟값을 구하는 프로그램을 작성하시오.
'''
#Input
'''
첫째 줄에 N과 M이 주어진다. (1 ≤ M < N ≤ 10) 둘째 줄에 떨어지는 사과의 개수 J가 주어진다. (1 ≤ J ≤ 20) 다음 J개 줄에는 사과가 떨어지는 위치가 순서대로 주어진다.
'''
#Output
'''
모든 사과를 담기 위해서 바구니가 이동해야 하는 거리의 최솟값을 출력한다.
'''

#Solution
'''
바구니 끝부분과 첫부분 사이에 사과가 떨어지는 경우 바구니는 움직이지 않음
첫부분보다 앞에 사과가 떨어지면 사과의 위치와 바구니 앞부분의 차이만큼 움직여야 함
끝부분보다 뒤에 떨어지면 사과의 위치와 바구니 끝부분의 차이만큼 움직여야 함
움직인 후 끝부분의 위치를 재정의함
'''
